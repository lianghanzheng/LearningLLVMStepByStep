prog 
    : stmt*
    ;
stmt
    : block_stmt
    | decl_stmt 
    | expr_stmt 
    | if_stmt 
    | for_stmt
    | break_stmt
    | continue_stmt
    | null_stmt
    ;
block_stmt
    : '{' stmt* '}'
decl_stmt
    : 'int' identifier ('=' expr)? (',' identifier ('=' expr)?)* ';' 
    ;
expr_stmt
    : expr ';'
    ;
if_stmt
    : 'if' '(' expr ')' stmt ('else' stmt)?
    ;
for_stmt
    : 'for' '(' expr? ';' expr? ';' expr? ')' stmt
    | 'for' '(' decl_stmt expr? ';' expr? ')' stmt
    ;
break_stmt
    : 'break' ';'
    ;
continue_stmt
    : 'continue' ';'
    ;
null_stmt
    : ';'
    ;
expr  
    : assign_expr
    | logic_expr
    ;
logic_expr
    : logand_expr ('||' logand_expr)*
    ;
logand_expr
    : bitor_expr ('&&' bitor_expr)*
    ;
bitor_expr
    : bitxor_expr ('|' bitxor_expr)*
    ;
bitxor_expr
    : bitand_expr ('^' bitand_expr)*
    ;
bitand_expr
    : equal_expr ('&' equal_expr)*
    ;
equal_expr
    : relation_expr (['==' | '!='] relation_expr)*
    ;
relation_expr
    : shift_expr (['<' | '>' | '<=' | '>='] shift_expr)*
    ;
shift_expr
    : addsub_expr (['<<' | '>>'] addsub_expr)*
assign_expr
    : identifier '=' expr 
    ;
addsub_expr
    : muldiv_expr ['+' | '-'] muldiv_expr
    ;
muldiv_expr
    : primary_expr ['*' | '/' | '%'] primary_expr
    ;
primary_expr 
    : number 
    | '(' expr ')'
    | identifier
    ;
identifier
    : [a-zA-Z_][a-zA-Z0-9_]*
number
    : [0-9]+
    ;